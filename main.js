/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var G=Object.defineProperty;var X=(J,v,t)=>v in J?G(J,v,{enumerable:!0,configurable:!0,writable:!0,value:t}):J[v]=t;var _=(J,v,t)=>X(J,typeof v!="symbol"?v+"":v,t);var{Plugin:Z,PluginSettingTab:ee,Setting:V,Notice:te}=require("obsidian");module.exports=class extends Z{constructor(){super(...arguments);_(this,"settings",{journalFolder:"Journal",hashtagFolder:"Hashtags",cleanDailyNotes:!0,templateFile:"",activationSymbol:"\\",blockCaptureSymbol:"\\",processingMode:"Both Folders",enableDebugLogging:!0,enableNotifications:!0,enableNoteOpening:!0,escapeHeaders:!1,enableLinkDateHeaders:!0,enableTagDateHeaders:!0,language:"Russian"});_(this,"isProcessing",new Set);_(this,"processingQueue",new Map);_(this,"lastProcessedTimes",new Map);_(this,"messages",{English:{processedTags:"Processed tags in {file}",processedLinks:"Processed links in {file}",errorProcessingFile:"Error processing file {file}: {error}",errorProcessingTagNote:"Error processing tag note {tag}: {error}",errorProcessingLinkNote:"Error processing link note {link}: {error}",invalidLinkPath:"Invalid link path: [[{link}]] in {file}",failedToOpenNote:"Failed to open note: {path}",tagLinkProcessed:"Tag and link commands processed successfully",errorFileChangeHandler:"Error initializing file change handler",settingsTitle:"Hashtag Journal Plugin Settings",journalFolderName:"Journal Folder",journalFolderDesc:"The folder where journal notes are stored.",hashtagFolderName:"Hashtag Folder",hashtagFolderDesc:"The folder where hashtag notes are stored.",cleanDailyNotesName:"Clean Daily Notes",cleanDailyNotesDesc:"Remove processed tags and links from daily notes. If disabled, only the activation symbol is removed.",activationSymbolName:"Activation Symbol",activationSymbolDesc:"Symbol to trigger tag/link processing (e.g., \\ or /).",blockCaptureSymbolName:"Block Capture Symbol",blockCaptureSymbolDesc:"Symbol at the start of text to capture multi-paragraph blocks, including empty lines, until the tag/link (e.g., \\).",processingModeName:"Processing Mode",processingModeDesc:"Choose where to process tags and links.",enableDebugLoggingName:"Enable Debug Logging",enableDebugLoggingDesc:"Log detailed information to the console.",enableNotificationsName:"Enable Notifications",enableNotificationsDesc:"Show notifications for plugin actions.",enableNoteOpeningName:"Enable Note Opening",enableNoteOpeningDesc:"Open the note after processing tags/links with a space before the activation symbol.",escapeHeadersName:"Escape Headers",escapeHeadersDesc:"Escape headers in processed text to prevent rendering issues.",enableLinkDateHeadersName:"Enable Link Date Headers",enableLinkDateHeadersDesc:"Add date headers (#### YYYY-MM-DD HH:MM) to linked notes.",enableTagDateHeadersName:"Enable Tag Date Headers",enableTagDateHeadersDesc:"Add date headers (#### YYYY-MM-DD HH:MM) to hashtag notes.",languageName:"Language",languageDesc:"Language for plugin messages and settings."},Russian:{processedTags:"\u041E\u0431\u0440\u0430\u0431\u043E\u0442\u0430\u043D\u044B \u0442\u0435\u0433\u0438 \u0432 {file}",processedLinks:"\u041E\u0431\u0440\u0430\u0431\u043E\u0442\u0430\u043D\u044B \u0441\u0441\u044B\u043B\u043A\u0438 \u0432 {file}",errorProcessingFile:"\u041E\u0448\u0438\u0431\u043A\u0430 \u043E\u0431\u0440\u0430\u0431\u043E\u0442\u043A\u0438 \u0444\u0430\u0439\u043B\u0430 {file}: {error}",errorProcessingTagNote:"\u041E\u0448\u0438\u0431\u043A\u0430 \u043E\u0431\u0440\u0430\u0431\u043E\u0442\u043A\u0438 \u0442\u0435\u0433\u0430 {tag}: {error}",errorProcessingLinkNote:"\u041E\u0448\u0438\u0431\u043A\u0430 \u043E\u0431\u0440\u0430\u0431\u043E\u0442\u043A\u0438 \u0441\u0441\u044B\u043B\u043A\u0438 {link}: {error}",invalidLinkPath:"\u041D\u0435\u0434\u043E\u043F\u0443\u0441\u0442\u0438\u043C\u044B\u0439 \u043F\u0443\u0442\u044C \u0441\u0441\u044B\u043B\u043A\u0438: [[{link}]] \u0432 {file}",failedToOpenNote:"\u041D\u0435 \u0443\u0434\u0430\u043B\u043E\u0441\u044C \u043E\u0442\u043A\u0440\u044B\u0442\u044C \u0437\u0430\u043C\u0435\u0442\u043A\u0443: {path}",tagLinkProcessed:"\u041A\u043E\u043C\u0430\u043D\u0434\u044B \u0442\u0435\u0433\u043E\u0432 \u0438 \u0441\u0441\u044B\u043B\u043E\u043A \u0443\u0441\u043F\u0435\u0448\u043D\u043E \u043E\u0431\u0440\u0430\u0431\u043E\u0442\u0430\u043D\u044B",errorFileChangeHandler:"\u041E\u0448\u0438\u0431\u043A\u0430 \u0438\u043D\u0438\u0446\u0438\u0430\u043B\u0438\u0437\u0430\u0446\u0438\u0438 \u043E\u0431\u0440\u0430\u0431\u043E\u0442\u0447\u0438\u043A\u0430 \u0438\u0437\u043C\u0435\u043D\u0435\u043D\u0438\u0439 \u0444\u0430\u0439\u043B\u043E\u0432",settingsTitle:"\u041D\u0430\u0441\u0442\u0440\u043E\u0439\u043A\u0438 \u043F\u043B\u0430\u0433\u0438\u043D\u0430 Hashtag Journal",journalFolderName:"\u041F\u0430\u043F\u043A\u0430 \u0436\u0443\u0440\u043D\u0430\u043B\u0430",journalFolderDesc:"\u041F\u0430\u043F\u043A\u0430, \u0432 \u043A\u043E\u0442\u043E\u0440\u043E\u0439 \u0445\u0440\u0430\u043D\u044F\u0442\u0441\u044F \u0437\u0430\u043C\u0435\u0442\u043A\u0438 \u0436\u0443\u0440\u043D\u0430\u043B\u0430.",hashtagFolderName:"\u041F\u0430\u043F\u043A\u0430 \u0442\u0435\u0433\u043E\u0432",hashtagFolderDesc:"\u041F\u0430\u043F\u043A\u0430, \u0432 \u043A\u043E\u0442\u043E\u0440\u043E\u0439 \u0445\u0440\u0430\u043D\u044F\u0442\u0441\u044F \u0437\u0430\u043C\u0435\u0442\u043A\u0438 \u0441 \u0442\u0435\u0433\u0430\u043C\u0438.",cleanDailyNotesName:"\u041E\u0447\u0438\u0441\u0442\u043A\u0430 \u0435\u0436\u0435\u0434\u043D\u0435\u0432\u043D\u044B\u0445 \u0437\u0430\u043C\u0435\u0442\u043E\u043A",cleanDailyNotesDesc:"\u0423\u0434\u0430\u043B\u044F\u0442\u044C \u043E\u0431\u0440\u0430\u0431\u043E\u0442\u0430\u043D\u043D\u044B\u0435 \u0442\u0435\u0433\u0438 \u0438 \u0441\u0441\u044B\u043B\u043A\u0438 \u0438\u0437 \u0435\u0436\u0435\u0434\u043D\u0435\u0432\u043D\u044B\u0445 \u0437\u0430\u043C\u0435\u0442\u043E\u043A. \u0415\u0441\u043B\u0438 \u043E\u0442\u043A\u043B\u044E\u0447\u0435\u043D\u043E, \u0443\u0434\u0430\u043B\u044F\u0435\u0442\u0441\u044F \u0442\u043E\u043B\u044C\u043A\u043E \u0441\u0438\u043C\u0432\u043E\u043B \u0430\u043A\u0442\u0438\u0432\u0430\u0446\u0438\u0438.",activationSymbolName:"\u0421\u0438\u043C\u0432\u043E\u043B \u0430\u043A\u0442\u0438\u0432\u0430\u0446\u0438\u0438",activationSymbolDesc:"\u0421\u0438\u043C\u0432\u043E\u043B \u0434\u043B\u044F \u0437\u0430\u043F\u0443\u0441\u043A\u0430 \u043E\u0431\u0440\u0430\u0431\u043E\u0442\u043A\u0438 \u0442\u0435\u0433\u043E\u0432/\u0441\u0441\u044B\u043B\u043E\u043A (\u043D\u0430\u043F\u0440\u0438\u043C\u0435\u0440, \\ \u0438\u043B\u0438 /).",blockCaptureSymbolName:"\u0421\u0438\u043C\u0432\u043E\u043B \u0437\u0430\u0445\u0432\u0430\u0442\u0430 \u0431\u043B\u043E\u043A\u0430",blockCaptureSymbolDesc:"\u0421\u0438\u043C\u0432\u043E\u043B \u0432 \u043D\u0430\u0447\u0430\u043B\u0435 \u0442\u0435\u043A\u0441\u0442\u0430 \u0434\u043B\u044F \u0437\u0430\u0445\u0432\u0430\u0442\u0430 \u043C\u043D\u043E\u0433\u043E\u0441\u0442\u0440\u043E\u0447\u043D\u044B\u0445 \u0431\u043B\u043E\u043A\u043E\u0432, \u0432\u043A\u043B\u044E\u0447\u0430\u044F \u043F\u0443\u0441\u0442\u044B\u0435 \u0441\u0442\u0440\u043E\u043A\u0438, \u0434\u043E \u0442\u0435\u0433\u0430/\u0441\u0441\u044B\u043B\u043A\u0438 (\u043D\u0430\u043F\u0440\u0438\u043C\u0435\u0440, \\).",processingModeName:"\u0420\u0435\u0436\u0438\u043C \u043E\u0431\u0440\u0430\u0431\u043E\u0442\u043A\u0438",processingModeDesc:"\u0412\u044B\u0431\u0435\u0440\u0438\u0442\u0435, \u0433\u0434\u0435 \u043E\u0431\u0440\u0430\u0431\u0430\u0442\u044B\u0432\u0430\u0442\u044C \u0442\u0435\u0433\u0438 \u0438 \u0441\u0441\u044B\u043B\u043A\u0438.",enableDebugLoggingName:"\u0412\u043A\u043B\u044E\u0447\u0438\u0442\u044C \u043E\u0442\u043B\u0430\u0434\u043E\u0447\u043D\u043E\u0435 \u043B\u043E\u0433\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u0435",enableDebugLoggingDesc:"\u0417\u0430\u043F\u0438\u0441\u044B\u0432\u0430\u0442\u044C \u043F\u043E\u0434\u0440\u043E\u0431\u043D\u0443\u044E \u0438\u043D\u0444\u043E\u0440\u043C\u0430\u0446\u0438\u044E \u0432 \u043A\u043E\u043D\u0441\u043E\u043B\u044C.",enableNotificationsName:"\u0412\u043A\u043B\u044E\u0447\u0438\u0442\u044C \u0443\u0432\u0435\u0434\u043E\u043C\u043B\u0435\u043D\u0438\u044F",enableNotificationsDesc:"\u041F\u043E\u043A\u0430\u0437\u044B\u0432\u0430\u0442\u044C \u0443\u0432\u0435\u0434\u043E\u043C\u043B\u0435\u043D\u0438\u044F \u043E \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044F\u0445 \u043F\u043B\u0430\u0433\u0438\u043D\u0430.",enableNoteOpeningName:"\u0412\u043A\u043B\u044E\u0447\u0438\u0442\u044C \u043E\u0442\u043A\u0440\u044B\u0442\u0438\u0435 \u0437\u0430\u043C\u0435\u0442\u043E\u043A",enableNoteOpeningDesc:"\u041E\u0442\u043A\u0440\u044B\u0432\u0430\u0442\u044C \u0437\u0430\u043C\u0435\u0442\u043A\u0443 \u043F\u043E\u0441\u043B\u0435 \u043E\u0431\u0440\u0430\u0431\u043E\u0442\u043A\u0438 \u0442\u0435\u0433\u043E\u0432/\u0441\u0441\u044B\u043B\u043E\u043A \u0441 \u043F\u0440\u043E\u0431\u0435\u043B\u043E\u043C \u043F\u0435\u0440\u0435\u0434 \u0441\u0438\u043C\u0432\u043E\u043B\u043E\u043C \u0430\u043A\u0442\u0438\u0432\u0430\u0446\u0438\u0438.",escapeHeadersName:"\u042D\u043A\u0440\u0430\u043D\u0438\u0440\u043E\u0432\u0430\u0442\u044C \u0437\u0430\u0433\u043E\u043B\u043E\u0432\u043A\u0438",escapeHeadersDesc:"\u042D\u043A\u0440\u0430\u043D\u0438\u0440\u043E\u0432\u0430\u0442\u044C \u0437\u0430\u0433\u043E\u043B\u043E\u0432\u043A\u0438 \u0432 \u043E\u0431\u0440\u0430\u0431\u043E\u0442\u0430\u043D\u043D\u043E\u043C \u0442\u0435\u043A\u0441\u0442\u0435 \u0434\u043B\u044F \u043F\u0440\u0435\u0434\u043E\u0442\u0432\u0440\u0430\u0449\u0435\u043D\u0438\u044F \u043F\u0440\u043E\u0431\u043B\u0435\u043C \u0441 \u0440\u0435\u043D\u0434\u0435\u0440\u0438\u043D\u0433\u043E\u043C.",enableLinkDateHeadersName:"\u0412\u043A\u043B\u044E\u0447\u0438\u0442\u044C \u0437\u0430\u0433\u043E\u043B\u043E\u0432\u043A\u0438 \u0434\u0430\u0442 \u0434\u043B\u044F \u0441\u0441\u044B\u043B\u043E\u043A",enableLinkDateHeadersDesc:"\u0414\u043E\u0431\u0430\u0432\u043B\u044F\u0442\u044C \u0437\u0430\u0433\u043E\u043B\u043E\u0432\u043A\u0438 \u0434\u0430\u0442 (#### \u0413\u0413\u0413\u0413-\u041C\u041C-\u0414\u0414 \u0427\u0427:\u041C\u041C) \u0432 \u0437\u0430\u043C\u0435\u0442\u043A\u0438 \u043F\u043E \u0441\u0441\u044B\u043B\u043A\u0430\u043C.",enableTagDateHeadersName:"\u0412\u043A\u043B\u044E\u0447\u0438\u0442\u044C \u0437\u0430\u0433\u043E\u043B\u043E\u0432\u043A\u0438 \u0434\u0430\u0442 \u0434\u043B\u044F \u0442\u0435\u0433\u043E\u0432",enableTagDateHeadersDesc:"\u0414\u043E\u0431\u0430\u0432\u043B\u044F\u0442\u044C \u0437\u0430\u0433\u043E\u043B\u043E\u0432\u043A\u0438 \u0434\u0430\u0442 (#### \u0413\u0413\u0413\u0413-\u041C\u041C-\u0414\u0414 \u0427\u0427:\u041C\u041C) \u0432 \u0437\u0430\u043C\u0435\u0442\u043A\u0438 \u0441 \u0442\u0435\u0433\u0430\u043C\u0438.",languageName:"\u042F\u0437\u044B\u043A",languageDesc:"\u042F\u0437\u044B\u043A \u0434\u043B\u044F \u0441\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u0439 \u0438 \u043D\u0430\u0441\u0442\u0440\u043E\u0435\u043A \u043F\u043B\u0430\u0433\u0438\u043D\u0430."}})}log(t){this.settings.enableDebugLogging&&console.log(`plugin:hashtag-journal-plugin: ${t}`)}notify(t,l={}){if(this.settings.enableNotifications){let n=this.settings.language||"English",s=this.messages[n][t]||this.messages.English[t]||t;for(let[f,$]of Object.entries(l))s=s.replace(`{${f}}`,$);new te(s)}}regexEscape(t){return t.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}resolveRelativePath(t,l){try{let n=l.substring(0,l.lastIndexOf("/"))||"";this.log(`Resolving link "${t}" relative to source file "${l}" (sourceDir: "${n}")`);let s=t;if(s.includes("|")&&(s=s.split("|")[0]),s=s.replace(/\\/g,"/"),this.log(`Normalized link "${t}" to "${s}"`),s.startsWith("http://")||s.startsWith("https://")){this.log(`Detected URL link: "${s}"`);let p=s.split("/"),F=p.indexOf("match");if(F!==-1&&F+1<p.length){let u=`match/${p[F+1].split("#")[0]}.md`;return this.log(`Resolved URL "${s}" to vault path "${u}"`),u}else return this.log(`Invalid URL format for "${s}", cannot extract match ID`),null}s=s.endsWith(".md")?s:s+".md";let f=s.split("/").filter(p=>p),$=[];s.startsWith("./")||s.startsWith("../")?($=n.split("/").filter(F=>F).slice(),this.log(`Link starts with './' or '../', resolving relative to sourceDir: ${n}`)):s.startsWith("/")?this.log("Link starts with '/', treating as absolute from vault root"):this.log("Link has no leading './', '../', or '/', treating as absolute from vault root");for(let p of f)if(p==="..")if($.length>0)$.pop(),this.log(`Processed '..' segment, popped last segment: ${$.join("/")}`);else return this.log(`Warning: Link "${t}" attempts to navigate beyond vault root`),null;else p==="."?this.log("Skipped '.' segment"):p!==""&&($.push(p.replace(/\.md$/,"")),this.log(`Added segment: ${p.replace(/\.md$/,"")}`));let k=$.join("/");return k=k.endsWith(".md")?k:k+".md",this.log(`Resolved link "${t}" to "${k}"`),!k||k.startsWith("..")?(this.log(`Error: Resolved path "${k}" is invalid or outside vault`),null):k}catch(n){return this.log(`Error resolving link "${t}" from "${l}": ${n.message}`),null}}async hasTagCommands(t){let l=await this.app.vault.read(t);this.log(`Checking file content for tag/link commands: ${t.path}
Content:
${l}`);let n;try{n=this.settings.activationSymbol.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}catch(p){throw this.log(`Error escaping activation symbol '${this.settings.activationSymbol}': ${p.message}`),p}let s,f;try{s=new RegExp("^(.*?)\\s*#([\\p{L}\\p{N}_\\/]+)\\s*"+n+"\\s*","um"),f=new RegExp("^(.*?)\\s*\\[\\[((?:[\\p{L}\\p{N}_\\/\\-\\. :#\\\\]+?)(?:\\|[\\p{L}\\p{N}_\\/\\-\\. :#\\\\]+)?)\\]\\]\\s*"+n+"\\s*","um")}catch(p){throw this.log(`Error constructing regex with escaped symbol '${n}': ${p.message}`),p}let $=l.match(s),k=l.match(f);return this.log(`Tag regex (${s}): ${$?"matched":"no match"}`),$&&this.log(`Tag matches: ${JSON.stringify($)}`),this.log(`Link regex (${f}): ${k?"matched":"no match"}`),k&&this.log(`Link Matches: ${JSON.stringify(k)}`),$||k}async enqueueFileProcessing(t,l){let n=t.path,f=(await this.app.vault.adapter.stat(n)).mtime;if(this.isProcessing.has(n)){this.log(`File ${n} is already being processed, adding to queue`),this.processingQueue.has(n)||this.processingQueue.set(n,[]),this.processingQueue.get(n).push({file:t,cleanDailyNotes:l,mtime:f});return}let $=this.lastProcessedTimes.get(n)||0;if(f<=$){this.log(`File ${n} has not changed since last processing (mtime: ${f}), skipping`);return}if(!await this.hasTagCommands(t)){this.log(`File ${n} has no tag or link commands with ${this.settings.activationSymbol}, skipping`);return}if(this.lastProcessedTimes.set(n,f),await this.processSingleFile(t,l),this.processingQueue.has(n)){let p=this.processingQueue.get(n);this.processingQueue.delete(n);for(let F of p){let N=await this.app.vault.adapter.stat(F.file.path);N.mtime>(this.lastProcessedTimes.get(n)||0)&&(this.lastProcessedTimes.set(n,N.mtime),await this.processSingleFile(F.file,F.cleanDailyNotes))}}}async onload(){await this.loadSettings(),this.addSettingTab(new K(this.app,this)),this.log("Hashtag Journal Plugin: Initializing..."),this.log(`Activation Symbol: ${this.settings.activationSymbol}`),this.log(`Block Capture Symbol: ${this.settings.blockCaptureSymbol}`),this.log(`Enable Link Date Headers: ${this.settings.enableLinkDateHeaders}`),this.log(`Enable Tag Date Headers: ${this.settings.enableTagDateHeaders}`),this.log(`Language: ${this.settings.language}`),this.addCommand({id:"process-tag-commands",name:"Process Tag Commands",callback:async()=>{this.log("Manual tag and link command processing triggered"),await this.processJournalFiles(this.settings.cleanDailyNotes),this.notify("tagLinkProcessed")}});try{this.registerEvent(this.app.vault.on("modify",async t=>{let l=this.settings.journalFolder.replace(/^\/+|\/+$/g,"").trim(),n=this.settings.hashtagFolder.replace(/^\/+|\/+$/g,"").trim(),s=!1;if(this.settings.processingMode==="All Vault"?s=!0:this.settings.processingMode==="Journal Folder"?s=t.path.startsWith(l):this.settings.processingMode==="Both Folders"&&(s=t.path.startsWith(l)||t.path.startsWith(n)),!s){this.log(`File ${t.path} modified, but not in scope for processing mode ${this.settings.processingMode}, skipping`);return}let $=(await this.app.vault.adapter.stat(t.path)).mtime,k=this.lastProcessedTimes.get(t.path)||0;if($<=k){this.log(`File ${t.path} modified, but mtime (${$}) not newer than last processed (${k}), skipping`);return}this.log(`File modified: ${t.path}`),this.log(`Processing modified file: ${t.path}`),await this.enqueueFileProcessing(t,this.settings.cleanDailyNotes),this.log(`Finished processing modified file: ${t.path}`)})),this.log("Registered vault.on(modify) for file changes")}catch(t){console.error(`Error registering vault.on(modify): ${t}`),this.notify("errorFileChangeHandler")}}escapeHeaders(t){return t.split(`
`).map(n=>n.match(/^(#+)\s*.*/)?"\\"+n:n).join(`
`)}async processJournalFiles(t){let l=this.settings.journalFolder.replace(/^\/+|\/+$/g,"").trim(),n=this.settings.hashtagFolder.replace(/^\/+|\/+$/g,"").trim(),s=this.app.vault.getMarkdownFiles();for(let f of s)(this.settings.processingMode==="All Vault"||this.settings.processingMode==="Journal Folder"&&f.path.startsWith(l)||this.settings.processingMode==="Both Folders"&&(f.path.startsWith(l)||f.path.startsWith(n)))&&await this.enqueueFileProcessing(f,t)}async processSingleFile(t,l){try{let n=this.settings.journalFolder.replace(/^\/+|\/+$/g,"").trim(),s=this.settings.hashtagFolder.replace(/^\/+|\/+$/g,"").trim(),f=t.path.startsWith(s),$=t.basename.toLowerCase();this.isProcessing.add(t.path),this.log(`Started processing: ${t.path}`);let k=await this.app.vault.read(t);this.log(`Processing file: ${t.path}`),this.log(`File content:
${k}`);let p=new TextEncoder().encode(k.slice(0,10));this.log(`First 10 bytes of file (hex): ${Array.from(p).map(e=>e.toString(16).padStart(2,"0")).join(" ")}`);let F=await this.app.vault.adapter.stat(t.path),N=new Date(F.mtime),u=`${N.getFullYear()}-${String(N.getMonth()+1).padStart(2,"0")}-${String(N.getDate()).padStart(2,"0")} ${String(N.getHours()).padStart(2,"0")}:${String(N.getMinutes()).padStart(2,"0")}`;this.log(`File modification time: ${u}`);let o=k.split(`
`),S=new Map,W=new Set,a=new Map,y=new Set,m=new Map,M=!1,R=!1,P=-1,A=[],C=[];for(let e=0;e<o.length;e++){let w=o[e].trim();this.log(`Line ${e+1}: Processing "${o[e]}"`);let h;try{h=this.settings.activationSymbol.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}catch(i){throw this.log(`Error escaping activation symbol '${this.settings.activationSymbol}' at line ${e+1}: ${i.message}`),i}let g,x;try{let i=new RegExp(`^(.*?)\\s*#([\\p{L}\\p{N}_\\/]+)\\s*${h}\\s*`,"u"),c=new RegExp(`^(.*?)\\s*\\[\\[((?:[\\p{L}\\p{N}_\\/\\-\\. :#\\\\]+?)(?:\\|[\\p{L}\\p{N}_\\/\\-\\. :#\\\\]+)?)\\]\\]\\s*${h}\\s*`,"u");g=o[e].match(i),x=o[e].match(c)}catch(i){throw this.log(`Error applying regex at line ${e+1}: ${i.message}`),i}if(o[e].startsWith(this.settings.blockCaptureSymbol)&&!R&&!g&&!x){R=!0,P=e,A=[],C=[];let i=o[e].startsWith(this.settings.blockCaptureSymbol)?o[e].slice(this.settings.blockCaptureSymbol.length):o[e];A.push(o[e]),C.push(i),this.log(`Line ${e+1}: Started block capture with symbol "${this.settings.blockCaptureSymbol}", stripped to "${i}"`);continue}if(R)if(g||x){P>0&&o[P-1].match(/^#{1,6}\s*.+/)&&(A.unshift(o[P-1]),C.unshift(o[P-1]),P--,this.log(`Line ${P+1}: Included header in block: "${o[P]}"`)),A.push(o[e]);let c;if(g){let r=g[2],H=o[e].replace(new RegExp(`\\s*#${r}\\s*${h}\\s*`,"u"),"").trim();H&&C.push(H),c=C.join(`
`).trim(),this.log(`Line ${e+1}: Ended block capture for tag #${r}, block text: "${c}"`)}else{let r=x[2],H=this.regexEscape(r),O=o[e].replace(new RegExp(`\\s*\\[\\[${H}\\]\\]\\s*${h}\\s*`,"u"),"").trim();O&&C.push(O),c=C.join(`
`).trim(),this.log(`Line ${e+1}: Ended block capture for link [[${r}]], block text: "${c}"`)}if(!c){this.log(`Line ${e+1}: Block capture has no text, skipping`),R=!1,A=[],C=[],P=-1;continue}let d=C;this.settings.escapeHeaders&&(d=C.map(r=>r.match(/^#{1,6}\s*.+/)?(this.log(`Line ${e+1}: Escaping header in block: "${r}" to "\\${r}"`),"\\"+r):r));let j=d.join(`
`).trim();if(g){let r=g[2],H=o[e].includes(`#${r} ${this.settings.activationSymbol}`);if(f&&(r.toLowerCase().startsWith($.toLowerCase()+"/")||r.toLowerCase()===$)){this.log(`Line ${e+1}: Skipping tag #${r}${this.settings.activationSymbol} in ${t.path} as it matches the file name or is a nested tag`),R=!1,A=[],C=[],P=-1;continue}let O=r.split("/")[0];S.has(O)||S.set(O,[]),S.get(O).push({id:e,fullTag:r,file:t.basename,text:[j],mtime:u,sourceFile:t.path,openNote:H&&this.settings.enableNoteOpening});let L=r.split("/");for(let b=1;b<=L.length;b++){let I=L.slice(0,b).join("/");W.add(I),this.log(`Added tag level to allTags: ${I}`)}if(l||f)for(let b=P;b<=e;b++)y.add(b),this.log(`Line ${b+1}: Marking line for removal (block capture): "${o[b]}"`);else{let b=o[e].replace(new RegExp(`\\s*${h}\\s*`)," ");m.set(e,b),this.log(`Line ${e+1}: Modifying line to remove activation symbol: "${o[e]}" -> "${b}"`)}}else if(x){let r=x[2],H=o[e].includes(`[[${r}]] ${this.settings.activationSymbol}`),O=r;O.includes("|")&&(O=O.split("|")[0]);let L=this.resolveRelativePath(O,t.path);if(!L){this.log(`Line ${e+1}: Skipping link [[${r}]]${this.settings.activationSymbol} in ${t.path} due to invalid resolved path`),this.notify("invalidLinkPath",{link:r,file:t.path}),R=!1,A=[],C=[],P=-1;continue}let b=t.path;if(L.toLowerCase()===b.toLowerCase()){this.log(`Line ${e+1}: Skipping link [[${r}]]${this.settings.activationSymbol} in ${t.path} as it points to the same file`),R=!1,A=[],C=[],P=-1;continue}if(a.has(L)||a.set(L,[]),a.get(L).push({id:e,link:O,fullLink:r,resolvedLinkPath:L,file:t.basename,text:j,mtime:u,sourceFile:t.path,openNote:H&&this.settings.enableNoteOpening}),l||f)for(let E=P;E<=e;E++)y.add(E),this.log(`Line ${E+1}: Marking line for removal (block capture): "${o[E]}"`);else{let E=o[e].replace(new RegExp(`\\]\\]\\s*${h}\\s*`),"]] ");m.set(e,E),this.log(`Line ${e+1}: Modifying line to remove activation symbol: "${o[e]}" -> "${E}"`)}}R=!1,A=[],C=[],P=-1;continue}else{A.push(o[e]);let i=o[e].startsWith(this.settings.blockCaptureSymbol)?o[e].slice(this.settings.blockCaptureSymbol.length):o[e];C.push(i),this.log(`Line ${e+1}: Continuing block capture, added line: "${o[e]}", stripped to "${i}"`);continue}if(g){let i=g[2],c=o[e].includes(`#${i} ${this.settings.activationSymbol}`),d=[],j=[],r=e,H=!1;d=[o[e]];let O=g[1].trim();j=O?[O]:[];let L=e-1;for(;L>=0&&o[L].trim()!=="";)d.unshift(o[L]),j.unshift(o[L].trim()),L--,this.log(`Line ${L+1}: Including previous line for tag #${i}: "${o[L]}"`);r=L+1,L>=0&&o[L].match(/^#{1,6}\s*.+/)&&(d.unshift(o[L]),j.unshift(o[L]),r=L,H=!0,this.log(`Line ${L+1}: Included header for tag #${i}: "${o[L]}"`));let b=j.join(`
`).trim();if(!b){this.log(`Line ${e+1}: Tag #${i}${this.settings.activationSymbol} has no text, skipping`);continue}if(f&&(i.toLowerCase().startsWith($.toLowerCase()+"/")||i.toLowerCase()===$)){this.log(`Line ${e+1}: Skipping tag #${i}${this.settings.activationSymbol} in ${t.path} as it matches the file name or is a nested tag`);continue}this.log(`Line ${e+1}: Found tag #${i}${c?" ":""}${this.settings.activationSymbol} with text: "${b}"`);let I=j;this.settings.escapeHeaders&&(I=j.map(T=>T.match(/^#{1,6}\s*.+/)?(this.log(`Line ${e+1}: Escaping header: "${T}" to "\\${T}"`),"\\"+T):T));let E=I.join(`
`).trim();this.log(`Line ${e+1}: Collected block text for tag: "${E}"`);let z=i.split("/")[0];S.has(z)||S.set(z,[]),S.get(z).push({id:e,fullTag:i,file:t.basename,text:[E],mtime:u,sourceFile:t.path,openNote:c&&this.settings.enableNoteOpening});let Q=i.split("/");for(let T=1;T<=Q.length;T++){let Y=Q.slice(0,T).join("/");W.add(Y),this.log(`Added tag level to allTags: ${Y}`)}if(l||f)for(let T=r;T<=e;T++)y.add(T),this.log(`Line ${T+1}: Marking line for removal: "${o[T]}"`);else{let T=o[e].replace(new RegExp(`\\s*${h}\\s*`)," ");m.set(e,T),this.log(`Line ${e+1}: Modifying line to remove activation symbol: "${o[e]}" -> "${T}"`)}}else if(x){let i=x[2],c=o[e].includes(`[[${i}]] ${this.settings.activationSymbol}`),d=i;d.includes("|")&&(d=d.split("|")[0]);let j=[],r=[],H=e,O=!1;j=[o[e]];let L=x[1].trim();r=L?[L]:[];let b=e-1;for(;b>=0&&o[b].trim()!=="";)j.unshift(o[b]),r.unshift(o[b].trim()),b--,this.log(`Line ${b+1}: Including previous line for link [[${i}]]: "${o[b]}"`);H=b+1,b>=0&&o[b].match(/^#{1,6}\s*.+/)&&(j.unshift(o[b]),r.unshift(o[b]),H=b,O=!0,this.log(`Line ${b+1}: Included header for link [[${i}]]: "${o[b]}"`));let I=r.join(`
`).trim();if(!I){this.log(`Line ${e+1}: Link [[${i}]]${this.settings.activationSymbol} has no text, skipping`);continue}let E=this.resolveRelativePath(d,t.path);if(!E){this.log(`Line ${e+1}: Skipping link [[${i}]]${this.settings.activationSymbol} in ${t.path} due to invalid resolved path`),this.notify("invalidLinkPath",{link:i,file:t.path});continue}let z=t.path;if(E.toLowerCase()===z.toLowerCase()){this.log(`Line ${e+1}: Skipping link [[${i}]]${this.settings.activationSymbol} in ${t.path} as it points to the same file (resolved: ${E})`);continue}this.log(`Line ${e+1}: Found link [[${i}]]${c?" ":""}${this.settings.activationSymbol} with extracted file path: "${d}", resolved path: "${E}", text: "${I}"`);let T=r;this.settings.escapeHeaders&&(T=r.map(B=>B.match(/^#{1,6}\s*.+/)?(this.log(`Line ${e+1}: Escaping header: "${B}" to "\\${B}"`),"\\"+B):B));let Y=T.join(`
`).trim();if(this.log(`Line ${e+1}: Collected block text for link: "${Y}"`),a.has(E)||a.set(E,[]),a.get(E).push({id:e,link:d,fullLink:i,resolvedLinkPath:E,file:t.basename,text:Y,mtime:u,sourceFile:t.path,openNote:c&&this.settings.enableNoteOpening}),l||f)for(let B=H;B<=e;B++)y.add(B),this.log(`Line ${B+1}: Marking line for removal: "${o[B]}"`);else{let B=o[e].replace(new RegExp(`\\]\\]\\s*${h}\\s*`),"]] ");m.set(e,B),this.log(`Line ${e+1}: Modifying line to remove activation symbol: "${o[e]}" -> "${B}"`)}}else if(f&&w.match(/^#([\p{L}\p{N}_\/]+)$/u)){let i=w.replace(/^#/,"");this.log(`Line ${e+1}: Found hashtag file tag #${i}`);let c=i.split("/")[0];S.has(c)||S.set(c,[]),W.add(i),this.log(`Added tag to allTags: ${i}`)}else{let i=w.match(new RegExp("^(.*?)\\s*#([\\p{L}\\p{N}_\\/]+)\\s*$","u")),c=w.match(new RegExp("^(.*?)\\s*\\[\\[((?:[\\p{L}\\p{N}_\\/\\-\\. :#\\\\]+?)(?:\\|[\\p{L}\\p{N}_\\/\\-\\. :#\\\\]+)?)\\]\\]\\s*$","u"));if(i&&i[1].trim()){let d=i[2];this.log(`Line ${e+1}: Invalid tag format #${d} (missing ${this.settings.activationSymbol}), please use #${d}${this.settings.activationSymbol}, skipping`)}else if(c&&c[1].trim()){let d=c[2];this.log(`Line ${e+1}: Invalid link format [[${d}]] (missing ${this.settings.activationSymbol}), please use [[${d}]]${this.settings.activationSymbol}, skipping`)}else this.log(`Line ${e+1}: No tag or link ending with ${this.settings.activationSymbol} found, preserving line`)}e%50===0&&await new Promise(i=>setTimeout(i,0))}if(this.log("Tag map contents:"),S.size===0)this.log("  No tags found");else for(let[e,w]of S){this.log(`  Base tag: ${e}`);for(let h of w)this.log(`    Block: id=${h.id}, fullTag=${h.fullTag}, text=[${h.text.join(", ")}], mtime=${h.mtime}, openNote=${h.openNote}`)}if(this.log(`All tags collected: ${Array.from(W).join(", ")||"none"}`),this.log("Link map contents:"),a.size===0)this.log("  No links found");else for(let[e,w]of a){this.log(`  Link: ${e}`);for(let h of w)this.log(`    Block: id=${h.id}, link=${h.link}, fullLink=${h.fullLink}, resolvedLinkPath=${h.resolvedLinkPath}, text=${h.text}, mtime=${h.mtime}, openNote=${h.openNote}`)}S.size>0?(this.log(`Processing tags: ${Array.from(W).join(", ")}`),await this.processTags(S,W,t)&&(M=!0)):this.log(`No tags found to process in ${t.path}`),a.size>0?(this.log(`Processing links: ${Array.from(a.keys()).join(", ")}`),await this.processLinks(a,t)&&(M=!0)):this.log(`No links found to process in ${t.path}`);let D=o.slice();if((l||f)&&y.size>0){this.log(`Cleaning file: Removing lines ${Array.from(y).join(", ")}`);for(let e of y)D[e]="";M=!0}if(m.size>0){this.log(`Modifying lines: ${Array.from(m.keys()).join(", ")}`);for(let[e,w]of m)D[e]=w;M=!0}let U;try{U=D.join(`
`).replace(/\n+$/,"")}catch(e){throw this.log(`Error joining new content for ${t.path}: ${e.message}`),e}let q=k.replace(/\n+$/,"");M&&U!==q?(this.log(`Preparing to update file: ${t.path}`),await this.app.vault.modify(t,U),this.log(`Updated file: ${t.path}`)):this.log(`No update needed for ${t.path}: content unchanged or cleaning disabled`),this.log(`Tag and link commands processed successfully for ${t.path}`),M&&(S.size>0&&this.notify("processedTags",{file:t.basename}),a.size>0&&this.notify("processedLinks",{file:t.basename}))}catch(n){console.error(`Error processing file ${t.path}: ${n}`),this.notify("errorProcessingFile",{file:t.basename,error:n.message})}finally{this.isProcessing.delete(t.path),this.log(`Finished processing: ${t.path}`)}}async processTags(t,l,n){let s=this.settings.hashtagFolder.replace(/^\/+|\/+$/g,"").trim(),f=!1;for(let[$,k]of t){let p=s+"/"+$+".md",F="";try{let N=this.app.vault.getAbstractFileByPath(p);N?(F=await this.app.vault.read(N),this.log(`Existing tag note found: ${p}`),this.log(`Existing content of ${p}:
${F}`)):this.log(`Creating new tag note: ${p}`);let u=[],o=!1;for(let e of k){let w=this.settings.enableTagDateHeaders?["#### "+e.mtime,e.text[0]]:[e.text[0]];this.log(`Adding new block for #${e.fullTag}${e.openNote?" ":""}${this.settings.activationSymbol}: ${w.join(`
`)}`),u.push({tag:e.fullTag,text:w,mtime:e.mtime,openNote:e.openNote}),e.openNote&&(o=!0)}let S=[],W=[],a={header:"",tags:[],content:[],timestamp:""},y=F?F.split(`
`):[],m=0,M=!0;for(;m<y.length;){let e=y[m];if(M&&!e.match(/^# \d{4}-\d{2}-\d{2} \d{2}:\d{2}$/)&&!e.match(/^# [\p{L}\p{N}_\/]+$/u)){S.push(e),m++;continue}if(M=!1,e.match(/^# \d{4}-\d{2}-\d{2} \d{2}:\d{2}$/)||e.match(/^# [\p{L}\p{N}_\/]+$/u)){for((a.tags.length>0||a.content.length>0)&&W.push(a),a={header:"",tags:[],content:[],timestamp:""},e.match(/^# \d{4}-\d{2}-\d{2} \d{2}:\d{2}$/)?(a.header=e,a.timestamp=e.replace(/^# /,""),m++):e.match(/^# [\p{L}\p{N}_\/]+$/u)&&(a.header=e,m++);m<y.length&&y[m].match(/^#[\p{L}\p{N}_\/]+$/u);)a.tags.push(y[m]),m++;for(;m<y.length&&!y[m].match(/^# \d{4}-\d{2}-\d{2} \d{2}:\d{2}$/)&&!y[m].match(/^# [\p{L}\p{N}_\/]+$/u);)a.content.push(y[m]),m++;continue}a.content.push(e),m++}for((a.tags.length>0||a.content.length>0)&&W.push(a);S.length>0&&S[S.length-1].trim()==="";)S.pop(),this.log("Removed trailing empty line from preamble");this.log(`Parsed preamble:
${S.join(`
`)||"none"}`),this.log(`Parsed sections: ${W.length}`);let R=new Map;for(let e of u)R.has(e.tag)||R.set(e.tag,[]),R.get(e.tag).push(e);let P=new Set,A=[],C=new Set;for(let e of W){let w=e.tags.map(i=>i.replace(/^#/,"")),h=!1,g=[],x=e.content;if(this.settings.enableTagDateHeaders){let i=[];for(let c=0;c<x.length;c++){let d=x[c];d.match(/^#### \d{4}-\d{2}-\d{2} \d{2}:\d{2}$/)?(i.length>0&&(g=g.concat(i),c<x.length-1&&i[i.length-1].trim()!==""&&(g.push(""),this.log(`Added single empty line after block in existing content: ${i.join("|")}`))),i=[d]):(i.push(d),(c===x.length-1||x[c+1].match(/^#### \d{4}-\d{2}-\d{2} \d{2}:\d{2}$/))&&(g=g.concat(i),i=[]))}i.length>0&&(g=g.concat(i)),g.length>0&&g[g.length-1].trim()===""&&(g.pop(),this.log("Removed trailing empty line from newSectionContent (timestamp mode)"))}else{let i=[];for(let c=0;c<x.length;c++){let d=x[c];d.trim()!==""?i.push(d):i.length>0&&(g=g.concat(i),g.push(""),this.log(`Added block and empty line in existing content: ${i.join("|")}`),i=[])}i.length>0&&(g=g.concat(i)),g.length>0&&g[g.length-1].trim()===""&&(g.pop(),this.log("Removed trailing empty line from newSectionContent"))}for(let i of w)if(R.has(i)&&!C.has(i)){for(let c of R.get(i)){let d=this.settings.enableTagDateHeaders?c.text.slice(1).join(`
`).trim():c.text.join(`
`).trim(),j=i+":"+d;if(P.has(j))this.log(`Skipping duplicate text for tag #${c.tag}: ${d}`);else if(P.add(j),this.settings.enableTagDateHeaders){g.length>0&&g[g.length-1].trim()!==""&&(g.push(""),this.log(`Added single empty line before new block for tag #${c.tag}`)),g.push("#### "+c.mtime);let r=c.text.slice(1).join(`
`).split(`
`);g=g.concat(r),h=!0,this.log(`Appended new block to section for tag #${c.tag}: ${r.join("|")}`)}else{g.length>0&&g[g.length-1].trim()!==""&&(g.push(""),this.log(`Added single empty line before new block for tag #${c.tag} (no timestamp)`));let r=c.text.join(`
`).split(`
`);g=g.concat(r),h=!0,this.log(`Appended new block to section for tag #${c.tag}: ${r.join("|")}`)}}C.add(i),R.delete(i)}(h||e.tags.length>0)&&(e.content=g,A.push(e),f=!0)}for(let[e,w]of R){if(C.has(e))continue;let h=[],g=[],x="",i=w[0].mtime,c=e.includes("/");c?(x=`# ${e.split("/").slice(1).join("/")}`,g=[`#${e}`]):(x=`# ${i}`,g=[`#${e}`]);for(let d of w){let j=this.settings.enableTagDateHeaders?d.text.slice(1).join(`
`).trim():d.text.join(`
`).trim(),r=e+":"+j;if(P.has(r))this.log(`Skipping duplicate text for new section tag #${d.tag}: ${j}`);else if(P.add(r),this.settings.enableTagDateHeaders){h.length>0&&h[h.length-1].trim()!==""&&(h.push(""),this.log(`Added single empty line before new block for new section tag #${d.tag}`)),h.push("#### "+d.mtime);let H=d.text.slice(1).join(`
`).split(`
`);h=h.concat(H),this.log(`Added new block to new section for tag #${d.tag}: ${H.join("|")}`)}else{h.length>0&&h[h.length-1].trim()!==""&&(h.push(""),this.log(`Added single empty line before new block for new section tag #${d.tag} (no timestamp)`));let H=d.text.join(`
`).split(`
`);h=h.concat(H),this.log(`Added new block to new section for tag #${d.tag}: ${H.join("|")}`)}}A.push({header:x,tags:g,content:h,timestamp:c?"":i}),f=!0,C.add(e)}let D=[];S.length>0&&(D=D.concat(S),D.push(""),this.log(`Added preamble to updated content: ${S.join("|")}`));for(let e=0;e<A.length;e++){let w=A[e];w.header&&D.push(w.header),w.tags.length>0&&(D=D.concat(w.tags)),w.content.length>0&&(w.tags.length>0&&w.content[0]!==""&&(D.push(""),this.log(`Added single empty line after tags before content for section ${w.header}`)),D=D.concat(w.content)),e<A.length-1&&D[D.length-1].trim()!==""&&(D.push(""),this.log(`Added single empty line between sections: ${w.header} and ${A[e+1].header}`))}for(;D.length>0&&D[D.length-1].trim()==="";)D.pop(),this.log("Removed trailing empty line from updatedContent");let U=D.join(`
`),q=F.replace(/\n+$/,"");if(U!==q?(this.log(`Updating tag note: ${p}`),await this.app.vault.adapter.write(p,U),this.log(`Updated tag note: ${p}`),f=!0):this.log(`No update needed for tag note: ${p}`),o&&this.settings.enableNoteOpening){this.log(`Opening note: ${p}`);let e=this.app.vault.getAbstractFileByPath(p);e?(await this.app.workspace.getLeaf().openFile(e),this.log(`Opened note: ${p}`)):(this.log(`Failed to open note: ${p} - file not found`),this.notify("failedToOpenNote",{path:p}))}}catch(N){console.error(`Error processing tag note ${p}: ${N}`),this.notify("errorProcessingTagNote",{tag:$,error:N.message})}}return f}async processLinks(t,l){let n=!1;for(let[s,f]of t)try{this.log(`Processing link note: ${s} with ${f.length} block(s)`);let $=this.app.vault.getAbstractFileByPath(s),k="";if($)k=await this.app.vault.read($),this.log(`Existing note found for link: ${s}`),this.log(`Existing content of ${s}:
${k}`);else{this.log(`Link note does not exist: ${s}, creating new file`);let a=s.split("/");if(a.pop(),a.join("/")){let m="";for(let M of a)m=m?`${m}/${M}`:M,this.app.vault.getAbstractFileByPath(m)?this.log(`Folder already exists: ${m}`):(await this.app.vault.createFolder(m),this.log(`Created folder: ${m}`))}$=await this.app.vault.create(s,""),this.log(`Created new link note: ${s}`)}let p=[],F=!1;for(let a of f){let y=this.settings.enableLinkDateHeaders?["#### "+a.mtime,a.text]:[a.text];this.log(`Adding new block for [[${a.fullLink}]]${a.openNote?" ":""}${this.settings.activationSymbol}: ${y.join(`
`)}`),p.push({link:a.fullLink,text:y,mtime:a.mtime,openNote:a.openNote}),a.openNote&&(F=!0)}let N=k?k.split(`
`):[],u=[],o=new Set;if(this.settings.enableLinkDateHeaders){let a=[];for(let y=0;y<N.length;y++){let m=N[y];m.match(/^#### \d{4}-\d{2}-\d{2} \d{2}:\d{2}$/)?(a.length>0&&(u=u.concat(a),y<N.length-1&&a[a.length-1].trim()!==""&&(u.push(""),this.log(`Added single empty line after block in link note: ${a.join("|")}`))),a=[m]):(a.push(m),(y===N.length-1||N[y+1].match(/^#### \d{4}-\d{2}-\d{2} \d{2}:\d{2}$/))&&(u=u.concat(a),a=[]))}a.length>0&&(u=u.concat(a))}else u=N.slice();for(let a of p){let y=this.settings.enableLinkDateHeaders?a.text.slice(1).join(`
`).trim():a.text.join(`
`).trim(),m=a.link+":"+y;if(o.has(m))this.log(`Skipping duplicate text for link [[${a.link}]]: ${y}`);else{if(o.add(m),this.settings.enableLinkDateHeaders){u.length>0&&u[u.length-1].trim()!==""&&(u.push(""),this.log(`Added single empty line before new block for link [[${a.link}]]`)),u.push("#### "+a.mtime);let M=a.text.slice(1).join(`
`).split(`
`);u=u.concat(M),this.log(`Appended new block to link note for [[${a.link}]]: ${M.join("|")}`)}else{u.length>0&&u[u.length-1].trim()!==""&&(u.push(""),this.log(`Added single empty line before new block for link [[${a.link}]] (no timestamp)`));let M=a.text.join(`
`).split(`
`);u=u.concat(M),this.log(`Appended new block to link note for [[${a.link}]]: ${M.join("|")}`)}n=!0}}for(;u.length>0&&u[u.length-1].trim()==="";)u.pop(),this.log("Removed trailing empty line from link note content");let S=u.join(`
`),W=k.replace(/\n+$/,"");if(S!==W?(this.log(`Updating link note: ${s}`),await this.app.vault.adapter.write(s,S),this.log(`Updated link note: ${s}`),n=!0):this.log(`No update needed for link note: ${s}`),F&&this.settings.enableNoteOpening){this.log(`Opening note: ${s}`);let a=this.app.vault.getAbstractFileByPath(s);a?(await this.app.workspace.getLeaf().openFile(a),this.log(`Opened note: ${s}`)):(this.log(`Failed to open note: ${s} - file not found`),this.notify("failedToOpenNote",{path:s}))}}catch($){console.error(`Error processing link note ${s}: ${$}`),this.notify("errorProcessingLinkNote",{link:s,error:$.message})}return n}async loadSettings(){let t=await this.loadData();for(let l in this.settings)t&&t.hasOwnProperty(l)&&(this.settings[l]=t[l]);this.log(`Loaded settings: ${JSON.stringify(this.settings)}`)}async saveSettings(){await this.saveData(this.settings),this.log(`Saved settings: ${JSON.stringify(this.settings)}`)}};var K=class extends ee{constructor(v,t){super(v,t),this.plugin=t}display(){let v=this.containerEl;v.empty();let t=this.plugin.settings.language||"English",l=this.plugin.messages[t]||this.plugin.messages.English;v.createEl("h2",{text:l.settingsTitle}),new V(v).setName(l.journalFolderName).setDesc(l.journalFolderDesc).addText(n=>n.setPlaceholder("Journal").setValue(this.plugin.settings.journalFolder).onChange(async s=>{this.plugin.settings.journalFolder=s.trim(),await this.plugin.saveSettings()})),new V(v).setName(l.hashtagFolderName).setDesc(l.hashtagFolderDesc).addText(n=>n.setPlaceholder("Hashtags").setValue(this.plugin.settings.hashtagFolder).onChange(async s=>{this.plugin.settings.hashtagFolder=s.trim(),await this.plugin.saveSettings()})),new V(v).setName(l.cleanDailyNotesName).setDesc(l.cleanDailyNotesDesc).addToggle(n=>n.setValue(this.plugin.settings.cleanDailyNotes).onChange(async s=>{this.plugin.settings.cleanDailyNotes=s,await this.plugin.saveSettings()})),new V(v).setName(l.activationSymbolName).setDesc(l.activationSymbolDesc).addText(n=>n.setPlaceholder("\\").setValue(this.plugin.settings.activationSymbol).onChange(async s=>{this.plugin.settings.activationSymbol=s.trim(),await this.plugin.saveSettings()})),new V(v).setName(l.blockCaptureSymbolName).setDesc(l.blockCaptureSymbolDesc).addText(n=>n.setPlaceholder("\\").setValue(this.plugin.settings.blockCaptureSymbol).onChange(async s=>{this.plugin.settings.blockCaptureSymbol=s.trim(),await this.plugin.saveSettings()})),new V(v).setName(l.processingModeName).setDesc(l.processingModeDesc).addDropdown(n=>n.addOption("All Vault",t==="Russian"?"\u0412\u0435\u0441\u044C \u0445\u0440\u0430\u043D\u0438\u043B\u0438\u0449\u0435":"All Vault").addOption("Journal Folder",t==="Russian"?"\u041F\u0430\u043F\u043A\u0430 \u0436\u0443\u0440\u043D\u0430\u043B\u0430":"Journal Folder").addOption("Both Folders",t==="Russian"?"\u041E\u0431\u0435 \u043F\u0430\u043F\u043A\u0438":"Both Folders").setValue(this.plugin.settings.processingMode).onChange(async s=>{this.plugin.settings.processingMode=s,await this.plugin.saveSettings()})),new V(v).setName(l.enableDebugLoggingName).setDesc(l.enableDebugLoggingDesc).addToggle(n=>n.setValue(this.plugin.settings.enableDebugLogging).onChange(async s=>{this.plugin.settings.enableDebugLogging=s,await this.plugin.saveSettings()})),new V(v).setName(l.enableNotificationsName).setDesc(l.enableNotificationsDesc).addToggle(n=>n.setValue(this.plugin.settings.enableNotifications).onChange(async s=>{this.plugin.settings.enableNotifications=s,await this.plugin.saveSettings()})),new V(v).setName(l.enableNoteOpeningName).setDesc(l.enableNoteOpeningDesc).addToggle(n=>n.setValue(this.plugin.settings.enableNoteOpening).onChange(async s=>{this.plugin.settings.enableNoteOpening=s,await this.plugin.saveSettings()})),new V(v).setName(l.escapeHeadersName).setDesc(l.escapeHeadersDesc).addToggle(n=>n.setValue(this.plugin.settings.escapeHeaders).onChange(async s=>{this.plugin.settings.escapeHeaders=s,await this.plugin.saveSettings()})),new V(v).setName(l.enableLinkDateHeadersName).setDesc(l.enableLinkDateHeadersDesc).addToggle(n=>n.setValue(this.plugin.settings.enableLinkDateHeaders).onChange(async s=>{this.plugin.settings.enableLinkDateHeaders=s,await this.plugin.saveSettings()})),new V(v).setName(l.enableTagDateHeadersName).setDesc(l.enableTagDateHeadersDesc).addToggle(n=>n.setValue(this.plugin.settings.enableTagDateHeaders).onChange(async s=>{this.plugin.settings.enableTagDateHeaders=s,await this.plugin.saveSettings()})),new V(v).setName(l.languageName).setDesc(l.languageDesc).addDropdown(n=>n.addOption("English","English").addOption("Russian","\u0420\u0443\u0441\u0441\u043A\u0438\u0439").setValue(this.plugin.settings.language).onChange(async s=>{this.plugin.settings.language=s,await this.plugin.saveSettings(),this.display()}))}};
